#!/bin/bash

# # Verificar si Zenity está instalado
# if ! command -v zenity &> /dev/null; then
#     echo "Error: Zenity no está instalado. Instálalo con: sudo apt install zenity"
#     exit 1
# fi

# # Verificar si mailutils está instalado para envío de correo
# if ! command -v mail &> /dev/null; then
#     zenity --error --text="Error: mailutils no está instalado. Instálalo con: sudo apt install mailutils"
#     exit 1
# fi

#!/bin/bash

validar_backup() {
    # Directorio de backups
    DESTINO="/backup"

    # Verificar si el directorio de backup existe; si no, crearlo
    if [ ! -d "$DESTINO" ]; then
        mkdir -p "$DESTINO" || { zenity --error --text="Error al crear el directorio de backup"; exit 1; }
        chmod 700 "$DESTINO"  # Cambié 777 a 700 por seguridad
    fi
}

# Función para realizar copia de seguridad
realizar_backup() {
    validar_backup
    ORIGEN=$(zenity --file-selection --title="Selecciona el archivo o carpeta para respaldar" --filename="$HOME/" --directory)
    
    # Verificar si se canceló la selección
    [ -z "$ORIGEN" ] && { zenity --error --text="No se seleccionó ningún archivo o carpeta"; return 1; }
    
    # Verificar si el origen existe
    [ ! -e "$ORIGEN" ] && { zenity --error --text="El archivo o carpeta seleccionado no existe"; return 1; }

    ARCHIVO="$DESTINO/backup_$(date +%Y%m%d_%H%M%S).tar.gz"
    tar -czf "$ARCHIVO" "$ORIGEN" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        zenity --info --text="Copia de seguridad creada exitosamente: $ARCHIVO"
    else
        zenity --error --text="Error al crear la copia de seguridad"
        [ -f "$ARCHIVO" ] && rm -f "$ARCHIVO"  # Elimina archivo corrupto si existe
        return 1
    fi
}

# Función para eliminar una copia de seguridad
eliminar_backup() {
    ARCHIVO=$(zenity --file-selection --title="Selecciona el archivo de backup a eliminar" --filename="$DESTINO/" --file-filter="*.tar.gz")
    
    # Verificar si se canceló la selección
    [ -z "$ARCHIVO" ] && { zenity --error --text="No se seleccionó ningún archivo"; return 1; }
    
    # Verificar si el archivo existe
    [ ! -f "$ARCHIVO" ] && { zenity --error --text="El archivo seleccionado no existe"; return 1; }

    rm -f "$ARCHIVO"
    if [ $? -eq 0 ]; then
        zenity --info --text="Copia de seguridad eliminada exitosamente: $ARCHIVO"
    else
        zenity --error --text="Error al eliminar la copia de seguridad"
        return 1
    fi
}

# Función para listar copias de seguridad
listar_backup() {
    validar_backup  # Asegura que el directorio exista
    
    # Usar un array para almacenar los archivos
    mapfile -t ARCHIVOS < <(ls -1 "$DESTINO"/*.tar.gz 2>/dev/null)
    
    if [ ${#ARCHIVOS[@]} -eq 0 ]; then
        zenity --info --text="No hay copias de seguridad disponibles"
    else
        # Convertir rutas absolutas a nombres de archivo para mejor presentación
        NOMBRES=()
        for archivo in "${ARCHIVOS[@]}"; do
            NOMBRES+=("$(basename "$archivo")")
        done
        zenity --list --title="Copias de Seguridad" --column="Archivos" "${NOMBRES[@]}"
    fi
}
# validar_backup(){
# # Directorio de backups
# DESTINO="/backup"

# # Verificar si el directorio de backup existe; si no, crearlo
# if [ ! -d "$DESTINO" ]; then
#     mkdir -p "$DESTINO" || { zenity --error --text="Error al crear el directorio de backup"; exit 1; }
#     chmod 777 "/backup"
# fi
# }

# # Función para realizar copia de seguridad
# realizar_backup() {
#     validar_backup
#     ORIGEN=$(zenity --file-selection --title="Selecciona el archivo o carpeta para respaldar" --filename="$HOME/" --directory)
#     if [ -z "$ORIGEN" ]; then
#         zenity --error --text="No se seleccionó ningún archivo o carpeta"
#         return 1
#     fi

#     ARCHIVO="$DESTINO/backup_$(date +%Y%m%d_%H%M%S).tar.gz"
#     tar -czf "$ARCHIVO" "$ORIGEN" 2>/dev/null
#     if [ $? -eq 0 ]; then
#         zenity --info --text="Copia de seguridad creada: $ARCHIVO"
#     else
#         zenity --error --text="Error al crear la copia de seguridad"
#     fi
# }

# # Función para eliminar una copia de seguridad
# eliminar_backup() {
#     ARCHIVO=$(zenity --file-selection --title="Selecciona el archivo de backup a eliminar" --filename="/$DESTINO/" --file-filter="*.tar.gz")
#     if [ -z "$ARCHIVO" ]; then
#         zenity --error --text="No se seleccionó ningún archivo"
#         return 1
#     fi

#     rm -f "$ARCHIVO"
#     if [ $? -eq 0 ]; then
#         zenity --info --text="Copia de seguridad eliminada: $ARCHIVO"
#     else
#         zenity --error --text="Error al eliminar la copia de seguridad"
#     fi
# }

# # Función para listar copias de seguridad
# listar_backup() {
#     ARCHIVOS=$(ls "$DESTINO"/*.tar.gz 2>/dev/null)
#     if [ -z "$ARCHIVOS" ]; then
#         zenity --info --text="No hay copias de seguridad disponibles"
#     else
#         zenity --list --title="Copias de Seguridad" --column="Archivos" $ARCHIVOS
#     fi
# }

# Función para enviar informe de seguridad
enviar_informe_seguridad() {
    ARCHIVO=$(zenity --file-selection --title="Selecciona el archivo de backup a enviar" --filename="$DESTINO/" --file-filter="*.tar.gz")
    if [ -z "$ARCHIVO" ]; then
        zenity --error --text="No se seleccionó ningún archivo"
        return 1
    fi

    DESTINATARIO=$(zenity --entry --title="Correo Electrónico" --text="Ingresa el correo destinatario")
    if [ -z "$DESTINATARIO" ]; then
        zenity --error --text="No se ingresó un destinatario"
        return 1
    fi

    echo "Adjunto copia de seguridad" | mail -s "Backup" -A "$ARCHIVO" "$DESTINATARIO"
    if [ $? -eq 0 ]; then
        zenity --info --text="Copia de seguridad enviada a $DESTINATARIO"
    else
        zenity --error --text="Error al enviar el correo"
    fi
}

# Función para monitorear discos
monitor_discos() {
    df -h | zenity --text-info --title="Estado de Discos" --width=600 --height=400
}

# Función para administrar particiones (usando fdisk)
administrar_particiones() {
    sudo fdisk -l | zenity --text-info --title="Administración de Particiones" --width=600 --height=400
}

# Función para limpiar archivos temporales
limpiar_temporales() {
    sudo rm -rf /tmp/* /var/tmp/* && zenity --info --text="Archivos temporales eliminados con éxito"
}

# Función para configurar firewall con UFW
configurar_firewall() {
    OPCION=$(zenity --list --title="Configurar Firewall" --column="Acción" "Habilitar UFW" "Deshabilitar UFW" "Estado de UFW")
    case "$OPCION" in
        "Habilitar UFW") sudo ufw enable && zenity --info --text="Firewall habilitado" ;;
        "Deshabilitar UFW") sudo ufw disable && zenity --info --text="Firewall deshabilitado" ;;
        "Estado de UFW") sudo ufw status | zenity --text-info --title="Estado del Firewall" ;;
        *) zenity --error --text="Opción inválida" ;;
    esac
}

# Función para análisis de vulnerabilidades con Lynis
analizar_vulnerabilidades() {
    if ! command -v lynis &> /dev/null; then
        zenity --error --text="Lynis no está instalado. Instálalo con: sudo apt install lynis"
        return 1
    fi
    sudo lynis audit system | tee /tmp/lynis_report.txt
    zenity --text-info --title="Análisis de Seguridad" --filename=/tmp/lynis_report.txt --width=700 --height=500
}

# Menú de gestión de seguridad
while true; do
    opcion=$(zenity --list --title="Gestión de Seguridad" \
        --column="Opción" --column="Acción" \
        1 "Copias de Seguridad" \
        2 "Gestión de Almacenamiento" \
        3 "Configurar Firewall" \
        4 "Análisis de Vulnerabilidades" \
        5 "Salir" --height=300)

    case "$opcion" in
        1) 
            subopcion=$(zenity --list --title="Copias de Seguridad" \
                --column="Opción" --column="Acción" \
                1 "Realizar" \
                2 "Eliminar" \
                3 "Listar" \
                4 "Mandar correo" --height=250)
            case "$subopcion" in
                1) realizar_backup ;;
                2) eliminar_backup ;;
                3) listar_backup ;;
                4) enviar_informe_seguridad ;;
            esac
        ;;
        2) 
            subopcion=$(zenity --list --title="Gestión de Almacenamiento" \
                --column="Opción" --column="Acción" \
                1 "Monitor de Discos" \
                2 "Administración de Particiones" \
                3 "Limpieza de Archivos Temporales" --height=250)
            case "$subopcion" in
                1) monitor_discos ;;
                2) administrar_particiones ;;
                3) limpiar_temporales ;;
            esac
        ;;
        3) configurar_firewall ;;
        4) analizar_vulnerabilidades ;;
        5) exit 0 ;;
        *) zenity --error --text="Opción inválida" ;;
    esac
done



#INSTALAR mailutils zenity ufw lynis