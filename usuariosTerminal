#!/bin/bash
# Script de gestión de usuarios en terminal con corrección de CONTRASEÑA

# Verificar si se ejecuta como root
if [ "$EUID" -ne 0 ]; then
    echo "Error: Este script debe ejecutarse con privilegios de root (sudo)"
    exit 1
fi

# Función para validar entrada
validar_entrada() {
    if [[ "$1" =~ [^a-zA-Z0-9_-] ]]; then
        echo "Error: Solo se permiten letras, números, guiones y guiones bajos en '$1'"
        return 1
    fi
    return 0
}

crear_usuario() {
    read -p "Ingrese el nombre de usuario: " USUARIO
    [ -z "$USUARIO" ] && { echo "Error: El nombre de usuario no puede estar vacío"; return 1; }
    validar_entrada "$USUARIO" || return 1
    if id "$USUARIO" >/dev/null 2>&1; then
        echo "Error: El usuario '$USUARIO' ya existe"
        return 1
    fi
    
    read -s -p "Ingrese la contraseña: " CONTRASENA
    echo
    [ -z "$CONTRASENA" ] && { echo "Error: La contraseña no puede estar vacía"; return 1; }
    
    if ! useradd -m -s /bin/bash "$USUARIO"; then
        echo "Error: No se pudo crear el usuario '$USUARIO'. Verifica permisos o espacio en disco."
        return 1
    fi
    if ! echo "$USUARIO:$CONTRASENA" | chpasswd; then
        echo "Error: No se pudo establecer la contraseña para '$USUARIO'"
        userdel "$USUARIO"  # Limpieza en caso de fallo
        return 1
    fi
    echo "Usuario '$USUARIO' creado con éxito"
}

eliminar_usuario() {
    read -p "Ingrese el nombre de usuario a eliminar: " USUARIO
    [ -z "$USUARIO" ] && { echo "Error: El nombre de usuario no puede estar vacío"; return 1; }
    validar_entrada "$USUARIO" || return 1
    if ! id "$USUARIO" >/dev/null 2>&1; then
        echo "Error: El usuario '$USUARIO' no existe"
        return 1
    fi
    
    read -p "¿Seguro que desea eliminar a '$USUARIO'? (s/n): " CONFIRMACION
    [[ "$CONFIRMACION" != "s" ]] && { echo "Eliminación cancelada"; return 1; }
    
    if ! userdel -r "$USUARIO" 2>/dev/null; then
        echo "Error: No se pudo eliminar el usuario '$USUARIO'. Verifica permisos o archivos en uso."
        return 1
    fi
    echo "Usuario '$USUARIO' eliminado con éxito"
}

restablecer_contraseña() {
    read -p "Ingrese el nombre de usuario: " USUARIO
    [ -z "$USUARIO" ] && { echo "Error: El nombre de usuario no puede estar vacío"; return 1; }
    validar_entrada "$USUARIO" || return 1
    if ! id "$USUARIO" >/dev/null 2>&1; then
        echo "Error: El usuario '$USUARIO' no existe"
        return 1
    fi
    
    read -s -p "Ingrese la nueva contraseña: " CONTRASENA
    echo
    [ -z "$CONTRASENA" ] && { echo "Error: La contraseña no puede estar vacía"; return 1; }
    
    if ! echo "$USUARIO:$CONTRASENA" | chpasswd; then
        echo "Error: No se pudo restablecer la contraseña para '$USUARIO'"
        return 1
    fi
    echo "Contraseña de '$USUARIO' restablecida con éxito"
}

listar_usuarios() {
    echo "Usuarios del sistema:"
    if ! cut -d: -f1 /etc/passwd | sort; then
        echo "Error: No se pudo listar los usuarios. Verifica permisos o el archivo /etc/passwd."
        return 1
    fi
}

gestionar_permisos() {
    read -p "Ingrese el nombre de usuario: " USUARIO
    [ -z "$USUARIO" ] && { echo "Error: El nombre de usuario no puede estar vacío"; return 1; }
    validar_entrada "$USUARIO" || return 1
    if ! id "$USUARIO" >/dev/null 2>&1; then
        echo "Error: El usuario '$USUARIO' no existe"
        return 1
    fi
    
    echo "Grupos disponibles:"
    cut -d: -f1 /etc/group | sort
    read -p "Ingrese el nombre del grupo: " GRUPO
    [ -z "$GRUPO" ] && { echo "Error: El nombre del grupo no puede estar vacío"; return 1; }
    validar_entrada "$GRUPO" || return 1
    if ! grep -q "^$GRUPO:" /etc/group; then
        echo "Error: El grupo '$GRUPO' no existe"
        return 1
    fi
    
    read -p "1) Añadir al grupo 2) Quitar del grupo: " OPCION
    case "$OPCION" in
        1) 
            if ! usermod -aG "$GRUPO" "$USUARIO"; then
                echo "Error: No se pudo añadir '$USUARIO' al grupo '$GRUPO'"
                return 1
            fi
            echo "Usuario '$USUARIO' añadido al grupo '$GRUPO'"
            ;;
        2) 
            if ! deluser "$USUARIO" "$GRUPO"; then
                echo "Error: No se pudo quitar '$USUARIO' del grupo '$GRUPO'"
                return 1
            fi
            echo "Usuario '$USUARIO' quitado del grupo '$GRUPO'"
            ;;
        *) echo "Error: Opción inválida"; return 1;;
    esac
}

enviar_info_usuario() {
    read -p "Ingrese el nombre de usuario: " USUARIO
    [ -z "$USUARIO" ] && { echo "Error: El nombre de usuario no puede estar vacío"; return 1; }
    validar_entrada "$USUARIO" || return 1
    if ! id "$USUARIO" >/dev/null 2>&1; then
        echo "Error: El usuario '$USUARIO' no existe"
        return 1
    fi
    
    read -p "Ingrese el correo destinatario: " DESTINATARIO
    [[ ! "$DESTINATARIO" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]] && { echo "Error: Formato de correo inválido"; return 1; }
    
    INFO=$(getent passwd "$USUARIO")
    if ! echo "Info de '$USUARIO': $INFO" | mail -s "Información de usuario" "$DESTINATARIO"; then
        echo "Error: No se pudo enviar el correo. Verifica mailutils o la configuración del servidor de correo."
        return 1
    fi
    echo "Correo enviado a '$DESTINATARIO' con la información de '$USUARIO'"
}

# Menú principal
while true; do
    echo -e "\nGestión de Usuarios"
    echo "1) Crear usuario"
    echo "2) Eliminar usuario"
    echo "3) Restablecer contraseña"
    echo "4) Listar usuarios"
    echo "5) Gestionar permisos"
    echo "6) Enviar info por correo"
    echo "7) Salir"
    read -p "Seleccione una opción: " OPCION
    
    case "$OPCION" in
        1) crear_usuario;;
        2) eliminar_usuario;;
        3) restablecer_contraseña;;
        4) listar_usuarios;;
        5) gestionar_permisos;;
        6) enviar_info_usuario;;
        7) exit 0;;
        *) echo "Error: Opción inválida";;
    esac
done
